/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters .001;	//mm

r 	1.67;	//radius of pipe
Lh	150;	//length of heated section
Lc	200;	//length of cooled section
//La	0;	//length of adiabatic section
theta	2.5;	//degrees


//Calculated Wedge Coordinates
thetaR	#calc "$theta*Foam::constant::mathematical::pi/180.0";
Iz	#calc "$r*cos($thetaR)";	//z-coord of wedge
Iyp	#calc "$r*sin($thetaR)";	//positive y coord
Iyn	#calc "-1.0*$Iyp";		//negitive y-coord
L	#calc "$Lh+$Lc";			//End of Pipe 
vertices
(
	//Start of tube
	(0 0 0) 	//0
	(0 $Iyp $Iz)	//1
	(0 $Iyn $Iz)	//2
	
	//Heated Section End
	($Lh 0 0) 	//3
	($Lh $Iyp $Iz)	//4
	($Lh $Iyn $Iz)	//5
	
	//Cooled Section End
	($L 0 0) 	//6
	($L $Iyp $Iz) //7
	($L $Iyn $Iz)	//8

);

blocks
(
	hex (0 1 2 0 3 4 5 3) (150 1 2) simpleGrading (1 1 1)
	hex (3 4 5 3 6 7 8 6) (200 1 2) simpleGrading (1 1 1)
);

boundary
(
    frontHeated
    {
        type wedge;
        faces
        (
        	(0 3 4 1)
     
        );
    }
    backHeated
    {
        type wedge;
        faces
        (
        	(2 5 3 0)
        
        );
    }
    frontCooled
    {
        type wedge;
        faces
        (
        	(3 6 7 4)
         
        );
    }
    backCooled
    {
        type wedge;
        faces
        (
         	(5 8 6 3)
        );
    }
    
    heatedWall
    {
    	type wall;
    	faces
    	(
    		(1 4 5 2)
    	
    	);
    }
    
    cooledWall
    {
    	type wall;
    	faces
    	(
    		(4 7 8 5)
    		
    	);
    }
    backWall
    {
    	type wall;
    	faces
    	(
    		(0 1 2 0)
    	
    	);
    }
    atmosphere
    {
    	type patch;
    	faces
    	(
    		(6 8 7 6)
    	
    	);
    
    }
    axis
    {
    	type empty;
    	faces
    	(
    		(0 3 3 0)
    		(3 6 6 3)
    	
    	);
    
    }
);


// ************************************************************************* //
